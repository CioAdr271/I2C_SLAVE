
I2C_SLAVE_App2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800144  00800144  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fd  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fb  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d8  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  9e:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
void USART_TransmitString(const char* str) {
	while (*str) { 
		USART_Transmitter(*str); 
		str++; 
	}
}
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b4:	8e e2       	ldi	r24, 0x2E	; 46
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <_Z8i2c_initv>:

void i2c_init(void) 
{   
    TWAR = (SLA << 1);  // Setare adresa slave
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);  // Activare TWI, activare ACK, activare intrerupere
  c2:	85 e4       	ldi	r24, 0x45	; 69
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	08 95       	ret

000000ca <__vector_24>:
}

ISR(TWI_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	cli();  // Dezactiveazã întreruperile globale pentru a preveni conflictele
  e0:	f8 94       	cli

	switch (TWSR & 0xF8)
  e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	80 3a       	cpi	r24, 0xA0	; 160
  ea:	09 f4       	brne	.+2      	; 0xee <__vector_24+0x24>
  ec:	c7 c0       	rjmp	.+398    	; 0x27c <__vector_24+0x1b2>
  ee:	28 f4       	brcc	.+10     	; 0xfa <__vector_24+0x30>
  f0:	80 36       	cpi	r24, 0x60	; 96
  f2:	51 f0       	breq	.+20     	; 0x108 <__vector_24+0x3e>
  f4:	80 38       	cpi	r24, 0x80	; 128
  f6:	81 f0       	breq	.+32     	; 0x118 <__vector_24+0x4e>
  f8:	da c0       	rjmp	.+436    	; 0x2ae <__vector_24+0x1e4>
  fa:	88 3a       	cpi	r24, 0xA8	; 168
  fc:	09 f4       	brne	.+2      	; 0x100 <__vector_24+0x36>
  fe:	c2 c0       	rjmp	.+388    	; 0x284 <__vector_24+0x1ba>
 100:	88 3b       	cpi	r24, 0xB8	; 184
 102:	09 f4       	brne	.+2      	; 0x106 <__vector_24+0x3c>
 104:	a6 c0       	rjmp	.+332    	; 0x252 <__vector_24+0x188>
 106:	d3 c0       	rjmp	.+422    	; 0x2ae <__vector_24+0x1e4>
	{
		case TW_SR_SLA_ACK: // Adresã recunoscutã
		//USART_TransmitString("\r\n");
		TWDR = 0;
 108:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); // Trimitere ACK
 10c:	85 ec       	ldi	r24, 0xC5	; 197
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		data_buffer_index = 0;
 112:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <data_buffer_index>
		break;
 116:	ce c0       	rjmp	.+412    	; 0x2b4 <__vector_24+0x1ea>
		
		case TW_SR_DATA_ACK: // Date primite
		{
			char received = TWDR;
 118:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			
			// Adaugã caracterul primit la buffer
			if (data_buffer_index < DATA_BUFFER_SIZE - 1)
 11c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <data_buffer_index>
 120:	e2 30       	cpi	r30, 0x02	; 2
 122:	40 f4       	brcc	.+16     	; 0x134 <__vector_24+0x6a>
			{
				data_buffer[data_buffer_index++] = received;
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	9e 0f       	add	r25, r30
 128:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <data_buffer_index>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 5b       	subi	r30, 0xB0	; 176
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 83       	st	Z, r24

			// Trimitere caracter pe UART
			//USART_Transmitter(received);
			

			if (data_buffer_index == DATA_BUFFER_SIZE - 1)
 134:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data_buffer_index>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	09 f0       	breq	.+2      	; 0x13e <__vector_24+0x74>
 13c:	86 c0       	rjmp	.+268    	; 0x24a <__vector_24+0x180>
			{
				
				switch (data_buffer[0])
 13e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <data_buffer>
 142:	82 37       	cpi	r24, 0x72	; 114
 144:	e1 f1       	breq	.+120    	; 0x1be <__vector_24+0xf4>
 146:	83 37       	cpi	r24, 0x73	; 115
 148:	09 f0       	breq	.+2      	; 0x14c <__vector_24+0x82>
 14a:	72 c0       	rjmp	.+228    	; 0x230 <__vector_24+0x166>
				{
					case 's':
					switch (data_buffer[1]) {
 14c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <data_buffer+0x1>
 150:	82 33       	cpi	r24, 0x32	; 50
 152:	89 f0       	breq	.+34     	; 0x176 <__vector_24+0xac>
 154:	83 33       	cpi	r24, 0x33	; 51
 156:	e1 f0       	breq	.+56     	; 0x190 <__vector_24+0xc6>
 158:	81 33       	cpi	r24, 0x31	; 49
 15a:	39 f5       	brne	.+78     	; 0x1aa <__vector_24+0xe0>
						case '1':
						PORTB |= (1 << 0);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-1-ON");
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	a5 e4       	ldi	r26, 0x45	; 69
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	01 90       	ld	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	8a 95       	dec	r24
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_24+0xa2>
						break;
 174:	66 c0       	rjmp	.+204    	; 0x242 <__vector_24+0x178>
						case '2':
						PORTB |= (1 << 1);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-2-ON");
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	e9 e0       	ldi	r30, 0x09	; 9
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	a5 e4       	ldi	r26, 0x45	; 69
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <__vector_24+0xbc>
						break;
 18e:	59 c0       	rjmp	.+178    	; 0x242 <__vector_24+0x178>
						case '3':
						PORTB |= (1 << 2);
 190:	85 b1       	in	r24, 0x05	; 5
 192:	84 60       	ori	r24, 0x04	; 4
 194:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-3-ON");
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	e2 e1       	ldi	r30, 0x12	; 18
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	a5 e4       	ldi	r26, 0x45	; 69
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 90       	ld	r0, Z+
 1a2:	0d 92       	st	X+, r0
 1a4:	8a 95       	dec	r24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <__vector_24+0xd6>
						break;
 1a8:	4c c0       	rjmp	.+152    	; 0x242 <__vector_24+0x178>
						default:
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "--ERROR--");
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	eb e1       	ldi	r30, 0x1B	; 27
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	a5 e4       	ldi	r26, 0x45	; 69
 1b2:	b1 e0       	ldi	r27, 0x01	; 1
 1b4:	01 90       	ld	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	8a 95       	dec	r24
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <__vector_24+0xea>
						break;
 1bc:	42 c0       	rjmp	.+132    	; 0x242 <__vector_24+0x178>
					}
					break;
					case 'r':
					switch (data_buffer[1]) {
 1be:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <data_buffer+0x1>
 1c2:	82 33       	cpi	r24, 0x32	; 50
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <__vector_24+0x11e>
 1c6:	83 33       	cpi	r24, 0x33	; 51
 1c8:	e1 f0       	breq	.+56     	; 0x202 <__vector_24+0x138>
 1ca:	81 33       	cpi	r24, 0x31	; 49
 1cc:	39 f5       	brne	.+78     	; 0x21c <__vector_24+0x152>
						case '1':
						PORTB &= ~(1 << 0);
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-1-OFF");
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	e5 e2       	ldi	r30, 0x25	; 37
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	a5 e4       	ldi	r26, 0x45	; 69
 1dc:	b1 e0       	ldi	r27, 0x01	; 1
 1de:	01 90       	ld	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	8a 95       	dec	r24
 1e4:	e1 f7       	brne	.-8      	; 0x1de <__vector_24+0x114>
						break;
 1e6:	2d c0       	rjmp	.+90     	; 0x242 <__vector_24+0x178>
						case '2':
						PORTB &= ~(1 << 1);
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-2-OFF");
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	ef e2       	ldi	r30, 0x2F	; 47
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	a5 e4       	ldi	r26, 0x45	; 69
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	01 90       	ld	r0, Z+
 1fa:	0d 92       	st	X+, r0
 1fc:	8a 95       	dec	r24
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <__vector_24+0x12e>
						break;
 200:	20 c0       	rjmp	.+64     	; 0x242 <__vector_24+0x178>
						case '3':
						PORTB &= ~(1 << 2);
 202:	85 b1       	in	r24, 0x05	; 5
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	85 b9       	out	0x05, r24	; 5
						//USART_TransmitString("\r\n");
						strcpy(message_buffer, "LED-3-OFF");
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	e9 e3       	ldi	r30, 0x39	; 57
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	a5 e4       	ldi	r26, 0x45	; 69
 210:	b1 e0       	ldi	r27, 0x01	; 1
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <__vector_24+0x148>
						break;
 21a:	13 c0       	rjmp	.+38     	; 0x242 <__vector_24+0x178>
						default:
						//USART_TransmitString("\r\n");
						
						strcpy(message_buffer, "--ERROR--");
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	eb e1       	ldi	r30, 0x1B	; 27
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	a5 e4       	ldi	r26, 0x45	; 69
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <__vector_24+0x15c>
						break;
 22e:	09 c0       	rjmp	.+18     	; 0x242 <__vector_24+0x178>
					}
					break;
					default:
					//USART_TransmitString("\r\n");
					strcpy(message_buffer, "--ERROR--");
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	eb e1       	ldi	r30, 0x1B	; 27
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	a5 e4       	ldi	r26, 0x45	; 69
 238:	b1 e0       	ldi	r27, 0x01	; 1
 23a:	01 90       	ld	r0, Z+
 23c:	0d 92       	st	X+, r0
 23e:	8a 95       	dec	r24
 240:	e1 f7       	brne	.-8      	; 0x23a <__vector_24+0x170>
					break;
				}
				data_buffer_index = 0;
 242:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <data_buffer_index>
				message_buffer_index = 0;
 246:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
			}
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); // Trimitere ACK
 24a:	85 ec       	ldi	r24, 0xC5	; 197
 24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		}
		break;
 250:	31 c0       	rjmp	.+98     	; 0x2b4 <__vector_24+0x1ea>
		
		case TW_ST_DATA_ACK:  // Master solicitã date
		if (message_buffer_index < MESSAGE_BUFFER_SIZE)
 252:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 256:	ea 30       	cpi	r30, 0x0A	; 10
 258:	58 f4       	brcc	.+22     	; 0x270 <__vector_24+0x1a6>
		{
			
			TWDR = message_buffer[message_buffer_index++];
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	8e 0f       	add	r24, r30
 25e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	eb 5b       	subi	r30, 0xBB	; 187
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	80 81       	ld	r24, Z
 26a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_24+0x1aa>
			//USART_Transmitter(TWDR);

		} else
		{
			TWDR = '\0';
 270:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		}
		
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);  // Trimitere ACK
 274:	85 ec       	ldi	r24, 0xC5	; 197
 276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 27a:	1c c0       	rjmp	.+56     	; 0x2b4 <__vector_24+0x1ea>

		case TW_SR_STOP: // Stop sau Repeated Start
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 27c:	85 ec       	ldi	r24, 0xC5	; 197
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 282:	18 c0       	rjmp	.+48     	; 0x2b4 <__vector_24+0x1ea>
		
		 case TW_ST_SLA_ACK:
		 //USART_TransmitString("Eroare");
		  if (message_buffer_index < MESSAGE_BUFFER_SIZE) 
 284:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 288:	ea 30       	cpi	r30, 0x0A	; 10
 28a:	58 f4       	brcc	.+22     	; 0x2a2 <__vector_24+0x1d8>
		  {
			  TWDR = message_buffer[message_buffer_index++];
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8e 0f       	add	r24, r30
 290:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	eb 5b       	subi	r30, 0xBB	; 187
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	80 81       	ld	r24, Z
 29c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__vector_24+0x1dc>
			  } else 
			  {
			  TWDR = '\0';
 2a2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		  }
		  TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);  // Pregãtire pentru urmãtoarea transmisie
 2a6:	85 ec       	ldi	r24, 0xC5	; 197
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		 break;
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <__vector_24+0x1ea>
		
		default:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2ae:	85 ec       	ldi	r24, 0xC5	; 197
 2b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	sei();  // Reactivare întreruperi globale
 2b4:	78 94       	sei
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <main>:

int main(void)
{
	USART_Init(MYUBRR);
 2cc:	87 e6       	ldi	r24, 0x67	; 103
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
    i2c_init();
 2d4:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z8i2c_initv>
    sei();  
 2d8:	78 94       	sei
    DDRB = 0xFF;  
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;  
 2de:	15 b8       	out	0x05, r1	; 5
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0x14>

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
